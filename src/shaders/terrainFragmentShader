#version 330 core


in vec2 passTextCoords;
in vec3 surfaceNormal;
in vec3 toLightVector[3];
in vec3 toCameraVector;
out vec4 outColour;
in float visibility;


uniform sampler2D textureSampler;
uniform vec3 lightColour[3];
uniform vec3 attenuation[3];
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColour;

uniform sampler2D backgroundTexture;
uniform sampler2D rTexture;
uniform sampler2D gTexture;
uniform sampler2D bTexture;
uniform sampler2D blendMap;

const float levels = 3.0;


void main(){

	vec4 blendMapColour = texture(blendMap,passTextCoords);
	float backTextureAmount = 1 - (blendMapColour.r + blendMapColour.g + blendMapColour.b);
	vec2 tiledCoords = passTextCoords * 40.0;
	vec4 backgroundTextureColour = texture(backgroundTexture, tiledCoords) * backTextureAmount;
	vec4 rTextureColour = texture(rTexture,tiledCoords) * blendMapColour.r;
	vec4 gTextureColour = texture(gTexture,tiledCoords) * blendMapColour.g;
	vec4 bTextureColour = texture(bTexture,tiledCoords) * blendMapColour.b;
	
	vec4 totalColour = backgroundTextureColour + rTextureColour +gTextureColour + bTextureColour;
	vec3 unitNormal = normalize(surfaceNormal);
	vec3 cameraVecNormal = normalize(toCameraVector);
	
	vec3 totalDiffuse = vec3(0.0);
	vec3 totalSpecular = vec3(0.0);
	

	for(int i = 0; i < 3; i++){
	float distance = length(toLightVector[i]);
	float attFactor = clamp(attenuation[i].x + (attenuation[i].y * distance) + (attenuation[i].z * distance * distance),0,1);
	vec3 lightNormal = normalize(toLightVector[i]);
	float nDot1 = dot(unitNormal, lightNormal);
	float brightness = max(nDot1, 0.0);
	
	//float level = floor(brightness * levels);
	//brightness = level /levels;
	
	vec3 lightDirection = - lightNormal;
	vec3 reflectedLigtDirection = reflect(lightDirection,unitNormal);
	float specularFactor = dot(reflectedLigtDirection,cameraVecNormal);
	specularFactor = max(specularFactor,0.0);
	float dampedFactor = pow(specularFactor,shineDamper); 
	
	//level = floor(dampedFactor * levels);
	//dampedFactor = level /levels;
	
	
	totalDiffuse = totalDiffuse + (brightness * lightColour[i]) / attFactor;
	totalSpecular = totalSpecular + (dampedFactor * reflectivity * lightColour[i]) / attFactor;
	}
	totalDiffuse = max(totalDiffuse, 0.2);
	
	outColour = vec4(totalDiffuse,1.0) * totalColour + vec4(totalSpecular,1.0);
	outColour = mix(vec4(skyColour,1.0),outColour,visibility);

}